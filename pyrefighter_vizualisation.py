# -*- coding: utf-8 -*-
"""PyreFighter - Vizualisation.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14szPaHSwmvZiYRFxDxZiohXzC0ibwIT3
"""

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import statsmodels.api
 
df = pd.read_csv(r'Preprocessing.csv', sep = ';')
df = df[['IncidentNumber', 'CalYear', 'IncidentGroup','PropertyCategory', 'AddressQualifier', 'IncGeo_BoroughName', 
         'Easting_rounded', 'Northing_rounded', 'IncidentStationGround', 'FirstPumpArriving_DeployedFromStation',
         'DateAndTimeMobilised', 'DateAndTimeMobile','DateAndTimeArrived', 'DeployedFromStation_Name','DeployedFromLocation', 'PumpOrder', 'ResponseTimeMinute', 'HourMobilised',
         'WeekdayMobilised', 'MonthMobilised', 'Time_preparation', 'CityCenter']]
df.head()

# Visualisation du temps de réponse
plt.figure(figsize=(10,5))
plt.hist(df['ResponseTimeMinute'], density = True, rwidth = 0.6, range = (0,20))
plt.xlabel('Temps de réponse (mins)')
plt.ylabel('Nombre d\'incidents')
plt.title('Distribution du nombre d\'incidents en fonction du temps de réponse (min)');
# Le temps de d'intervention des pompiers est majoritairement compris entre 3 et 8 min. La prédiction du temps de réponse doit donc être de l'ordre de la minute.

# Visualisation du temps de réponse en fonction de l'heure de la journée

sns.catplot(x = 'HourMobilised', y = 'ResponseTimeMinute', kind = 'bar', data = df)
plt.ylim(5,6.5)
plt.title('Distribution du du temps de réponse (min) en fonction de l\'heure de la journée');

# Relation avec la variable cible

# Hypothèse HourMobilised n'influe pas sur ResponseTimeMinute
result = statsmodels.formula.api.ols('ResponseTimeMinute ~ HourMobilised', data = df).fit()
table = statsmodels.api.stats.anova_lm(result)
table
# Conclusion : la p-value (PR(>F)) est inférieure à 5% donc on rejette l'hypothèse. Les 2 variables ne sont pas indépendantes.
# Le temps de réponse le plus faible est atteint à 8h, ce temps augmente jusqu'à 14h pour atteindre sa valeur maximale puis diminue jusqu'à 22h pour réaugmenter et 
# atteindre un second pic vers 5h du matin.
# Le temps de réponse maximum est atteint à 14h, ce temps de réponse diminue jusqu'à 22h.

incident_per_hour = df.groupby('HourMobilised', as_index = False).agg({'IncidentNumber':'count'})
# incident_per_hour
plt.figure(figsize=(20,10))
plt.bar(incident_per_hour['HourMobilised'],incident_per_hour['IncidentNumber'])
plt.xlabel('Heure')
plt.ylabel('Nombre d\'incidents')
plt.title('Distribution du nombre d\'incidents en fonction de l\'heure');

# Visualisation du temps de réponse en fonction du jour de la semaine
sns.catplot(x = 'WeekdayMobilised', y = 'ResponseTimeMinute', kind = 'bar', data = df)
plt.ylim(5,6)
plt.title('Distribution du du temps de réponse (min) en fonction du jour de la semaine');

# Relation avec la variable cible

# Hypothèse WeekdayMobilised n'influe pas sur ResponseTimeMinute
result = statsmodels.formula.api.ols('ResponseTimeMinute ~ WeekdayMobilised', data = df).fit()
table = statsmodels.api.stats.anova_lm(result)
table
# Conclusion : la p-value (PR(>F)) est supérieure à 5% donc on n'accepte pas l'hypothèse nulle. Les 2 variables sont indépendantes.

# Visualisation du temps de réponse en fonction du mois

sns.catplot(x = 'MonthMobilised', y = 'ResponseTimeMinute', kind = 'bar', data = df)
plt.ylim(5,6)
plt.title('Distribution du du temps de réponse (min) en fonction du mois');

# Relation avec la variable cible

# Hypothèse MonthMobilised n'influe pas sur ResponseTimeMinute
result = statsmodels.formula.api.ols('ResponseTimeMinute ~ MonthMobilised', data = df).fit()
table = statsmodels.api.stats.anova_lm(result)
table
# Conclusion : la p-value (PR(>F)) est supérieure à 5% donc on valide l'hypothèse. Les 2 variables sont indépendantes.

# Visualisation du temps de réponse en fonction de l'heure de la journée et par année
sns.catplot(x = 'HourMobilised', y = 'ResponseTimeMinute', kind = 'bar', hue = 'CalYear', data = df)
plt.ylim(5,6.5)
plt.title('Distribution du du temps de réponse (min) en fonction de l\'heure de la journée et par année');

# On observe qu'en majorité le temps de réponse le plus faible était en 2020 à chaque moment de la journée.

# Visualisation du temps de réponse en fonction du mois et par année
plt.figure(figsize=(20,10))
sns.catplot(x = 'MonthMobilised', y = 'ResponseTimeMinute', kind = 'bar', hue = 'CalYear', data = df)
plt.ylim(5,6.5)
plt.title('Distribution du du temps de réponse (min) en fonction du mois et par année');

# On observe que le temps de réponse moyen est systématiquement plus faible à chaque mois de l'année en 2020.
# On observe également que la différence est plus importante pour les mois d'avril, mai et novembre, mois de l'année pendant
# lesquels la ville de Londres était complètement confinée.

# Visualisation du temps de réponse en fonction du type de propriété
viz = sns.catplot(x = 'PropertyCategory', y = 'ResponseTimeMinute', kind = 'bar', data = df)
viz.set_xticklabels(rotation=75)
plt.ylim(5,8)
plt.title('Distribution du du temps de réponse (min) en fonction du type de propriété');

# Relation avec la variable cible

# Hypothèse PropertyCategory n'influe pas sur ResponseTimeMinute
result = statsmodels.formula.api.ols('ResponseTimeMinute ~ PropertyCategory', data = df).fit()
table = statsmodels.api.stats.anova_lm(result)
table
# Conclusion : la p-value (PR(>F)) est inférieure à 5% donc on rejette l'hypothèse. Les 2 variables ne sont pas indépendantes.
# On observe que lorsqu'un incident a lieu dans un bateau ou un avion, le temps de réponse est plus élevé.

# Visualisation du temps de réponse en fonction de l'exactitude de l'adresse
viz = sns.catplot(x = 'AddressQualifier', y = 'ResponseTimeMinute', kind = 'bar', data = df)
viz.set_xticklabels(rotation=90)
plt.ylim(5,10)
plt.title('Distribution du du temps de réponse (min) en fonction de l\'exactitude de l\'adresse');


# Relation avec la variable cible

# Hypothèse AddressQualifier n'influe pas sur ResponseTimeMinute
result = statsmodels.formula.api.ols('ResponseTimeMinute ~ AddressQualifier', data = df).fit()
table = statsmodels.api.stats.anova_lm(result)
table
# Conclusion : la p-value (PR(>F)) est inférieure à 5% donc on rejette l'hypothèse. Les 2 variables ne sont pas indépendantes.
# On observe que le temps de réponse le plus faible est obtenue lorsque l'adresse est correcte.
# Par ailleurs, le temps de réponse le plus long est obtenu lorsque l'incident se trouve sur une autoroute ou une route
# surélevée. En effet, il est plus difficile d'indiquer une localisation précise sur ce types de lieu.

# Visualisation du temps de réponse en fonction de l'arrondissement où l'incident a eu lieu
plt.figure(figsize=(20,10))
viz = sns.catplot(x = 'IncGeo_BoroughName', y = 'ResponseTimeMinute', kind = 'bar', data = df)
viz.set_xticklabels(rotation=90)
plt.ylim(5,7)
plt.title('Distribution du du temps de réponse (min) en fonction de l\'arrondissement où l\'incident a eu lieu');

# Relation avec la variable cible

# Hypothèse IncGeo_BoroughName n'influe pas sur ResponseTimeMinute
result = statsmodels.formula.api.ols('ResponseTimeMinute ~ IncGeo_BoroughName', data = df).fit()
table = statsmodels.api.stats.anova_lm(result)
table
# Conclusion : la p-value (PR(>F)) est inférieure à 5% donc on rejette l'hypothèse. Les 2 variables ne sont pas indépendantes.
# On observe qu'il y a une différence de temps d'intervention en fonction des arrondissements.

# Visualisation du temps de réponse en fonction de la localisation de l'incident centre ville/périphérie
viz = sns.catplot(x = 'CityCenter', y = 'ResponseTimeMinute', kind = 'bar', data = df)
viz.set_xticklabels(rotation=90)
plt.title('Distribution du du temps de réponse (min) en fonction de la localisation de l\'incident centre ville/périphérie');

# Relation avec la variable cible

# Hypothèse CityCenter n'influe pas sur ResponseTimeMinute
result = statsmodels.formula.api.ols('ResponseTimeMinute ~ CityCenter', data = df).fit()
table = statsmodels.api.stats.anova_lm(result)
table
# Conclusion : la p-value (PR(>F)) est inférieure à 5% donc on rejette l'hypothèse. Les 2 variables ne sont pas indépendantes.
# On observe que le temps de réponse est plus faible lorsque l'incident a lieu en centre ville.

# Visualisation du temps de réponse en fonction de la caserne responsable de la zone d'incident
viz = sns.catplot(x = 'IncidentStationGround', y = 'ResponseTimeMinute', kind = 'bar', data = df)
viz.set_xticklabels(rotation=90)
plt.ylim(4,9)
plt.title('Distribution du du temps de réponse (min) en fonction de la caserne responsable de la zone d\'incident');

# Relation avec la variable cible

# Hypothèse 'IncidentStationGround' n'influe pas sur ResponseTimeMinute
result = statsmodels.formula.api.ols('ResponseTimeMinute ~ IncidentStationGround', data = df).fit()
table = statsmodels.api.stats.anova_lm(result)
table
# Conclusion : la p-value (PR(>F)) est inférieure à 5% donc on rejette l'hypothèse. Les 2 variables ne sont pas indépendantes.

# Visualisation du temps de réponse en fonction du 1er camion arrivé sur les lieux
viz = sns.catplot(x = 'FirstPumpArriving_DeployedFromStation', y = 'ResponseTimeMinute', kind = 'bar', data = df)
viz.set_xticklabels(rotation=90)
plt.ylim(4,14)
plt.title('Distribution du du temps de réponse (min) en fonction du 1er camion arrivé sur les lieux');

# Relation avec la variable cible

# Hypothèse 'FirstPumpArriving_DeployedFromStation' n'influe pas sur ResponseTimeMinute
result = statsmodels.formula.api.ols('ResponseTimeMinute ~ FirstPumpArriving_DeployedFromStation', data = df).fit()
table = statsmodels.api.stats.anova_lm(result)
table
# Conclusion : la p-value (PR(>F)) est inférieure à 5% donc on rejette l'hypothèse. Les 2 variables ne sont pas indépendantes.

# Visualisation du temps de réponse en fonction de la caserne déployée
viz = sns.catplot(x = 'DeployedFromStation_Name', y = 'ResponseTimeMinute', kind = 'bar', data = df)
viz.set_xticklabels(rotation=90)
plt.ylim(4,8)
plt.title('Distribution du du temps de réponse (min) en fonction de la caserne déployée');

# Relation avec la variable cible

# Hypothèse 'DeployedFromStation_Name' n'influe pas sur ResponseTimeMinute
result = statsmodels.formula.api.ols('ResponseTimeMinute ~ DeployedFromStation_Name', data = df).fit()
table = statsmodels.api.stats.anova_lm(result)
table
# Conclusion : la p-value (PR(>F)) est inférieure à 5% donc on rejette l'hypothèse. Les 2 variables ne sont pas indépendantes.

# Visualisation du temps de réponse en fonction du lieu de déploiement de la brigade
viz = sns.catplot(x = 'DeployedFromLocation', y = 'ResponseTimeMinute', kind = 'bar', data = df)
viz.set_xticklabels(rotation=90)
plt.title('Distribution du du temps de réponse (min) en fonction du lieu de déploiement de la brigade');

# Relation avec la variable cible

# Hypothèse 'DeployedFromLocation' n'influe pas sur ResponseTimeMinute
result = statsmodels.formula.api.ols('ResponseTimeMinute ~ DeployedFromLocation', data = df).fit()
table = statsmodels.api.stats.anova_lm(result)
table
# Conclusion : la p-value (PR(>F)) est inférieure à 5% donc on rejette l'hypothèse. Les 2 variables ne sont pas indépendantes.
# On observe que le temps de réponse est plus faible lorsque la brigade se trouve à leur caserne lors de l'appel (97% des cas).

# Visualisation du temps de réponse en fonction du type d'incident
viz = sns.catplot(x = 'IncidentGroup', y = 'ResponseTimeMinute', kind = 'bar', data = df)
viz.set_xticklabels(rotation=90)
plt.ylim(5,6.5)
plt.title('Distribution du du temps de réponse (min) en fonction du type d\'incident');

# Relation avec la variable cible

# Hypothèse 'IncidentGroup' n'influe pas sur ResponseTimeMinute
result = statsmodels.formula.api.ols('ResponseTimeMinute ~ IncidentGroup', data = df).fit()
table = statsmodels.api.stats.anova_lm(result)
table
# Conclusion : la p-value (PR(>F)) est inférieure à 5% donc on rejette l'hypothèse. Les 2 variables ne sont pas indépendantes.
# On observe que le temps de réponse est plus long lorsqu'il s'agit d'un incendie.

# Visualisation du temps de réponse en fonction du nombre de camions demandés
viz = sns.catplot(x = 'PumpOrder', y = 'ResponseTimeMinute', kind = 'bar', data = df)
viz.set_xticklabels(rotation=90)
plt.title('Distribution du du temps de réponse (min) en fonction du nombre de camions demandés');

# Relation avec la variable cible

# Hypothèse 'PumpOrder' n'influe pas sur ResponseTimeMinute
result = statsmodels.formula.api.ols('ResponseTimeMinute ~ PumpOrder', data = df).fit()
table = statsmodels.api.stats.anova_lm(result)
table
# Conclusion : la p-value (PR(>F)) est inférieure à 5% donc on rejette l'hypothèse. Les 2 variables ne sont pas indépendantes.
# On observe que plus le nombre de camions demandés est grand, plus le temps de réponse est important.
# Limites : pour la grande majorité des incidents, seuls 1 ou 2 camions interviennent (Ex : 1 seul incident avec 11 camions)